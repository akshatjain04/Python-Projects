# Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Scenario: Test if the function `welcome` prints out the correct first print statement.
Test Case: Call the function welcome.
Expected Result: The statement "Welcome to Tic-Tac_toe. It is a game for two players" is printed.

2. Scenario: Test if the function `welcome` prints out the correct second print statement.
Test Case: Call the function welcome.
Expected Result: The statement "The first to go will be chosen randomly" is printed.

3. Scenario: Test if the function `welcome` prints out the statements in the correct order.
Test Case: Call the function welcome.
Expected Result: The statements are printed in the correct order - the first statement printed is "Welcome to Tic-Tac_toe. It is a game for two players" and the second statement printed is "The first to go will be chosen randomly".

4. Scenario: Test if the function `welcome` completes its execution without exceptions when called multiple times in a row.
Test Case: Call the function welcome multiple times.
Expected Result: The function `welcome` should execute without any exceptions each time it is called.

5. Scenario: Test if the function `welcome` maintains its output consistency when called consecutively.
Test Case: Call the function welcome multiple times consecutively.
Expected Result: The function output should be consistent across all the calls. It should always print the same messages in the same order.
"""
import pytest
import tictactoe
from io import StringIO
from contextlib import redirect_stdout

def test_welcome_message():
    # Stores everything that gets printed to the standard output
    f = StringIO()
    with redirect_stdout(f):
        tictactoe.welcome()
    out = f.getvalue().split('\n')
    
    # Test if the function `welcome` prints out the correct first print statement.
    assert out[0] == 'Welcome to Tic-Tac_toe. It is a game for two players'

    # Test if the function `welcome` prints out the correct second print statement.
    assert out[1] == 'The first to go will be chosen randomly'

    # Test if the function `welcome` prints out the statements in the correct order.
    assert len(out) == 3
    assert out[:2] == ['Welcome to Tic-Tac_toe. It is a game for two players', 'The first to go will be chosen randomly']

def test_welcome_execution_no_exceptions():
    # Test if the function `welcome` completes its execution without exceptions when called multiple times in a row.
    try:
        for _ in range(5):
            tictactoe.welcome()
    except Exception as e:
        pytest.fail(f"welcome() raised {type(e).__name__} unexpectedly!")

def test_welcome_output_consistency():
    # Test if the function `welcome` maintains its output consistency when called consecutively.
    f1 = StringIO()
    f2 = StringIO()
    with redirect_stdout(f1):
        tictactoe.welcome()
    with redirect_stdout(f2):
        tictactoe.welcome()

    out1 = f1.getvalue()
    out2 = f2.getvalue()

    assert out1 == out2, "Inconsistent output for consecutive calls to welcome()"
