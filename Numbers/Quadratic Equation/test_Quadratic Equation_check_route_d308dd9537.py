# Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
Test Scenario 1: Normal Usage
- Description: The function should work correctly with normal usage of the function.
- Input: Positive number (e.g. 10) 
- Expected Output: "This quadratic equation is Ascending"

Test Scenario 2: Negative Number Input
- Description: The message "This quadratic equation is Descending" should be returned when the input is a negative number.
- Input: Negative number (e.g. -5)
- Expected Output: "This quadratic equation is Descending"

Test Scenario 3: Zero Input
- Description: The message "This quadratic equation is Descending" should be returned when the input is zero.
- Input: Zero
- Expected Output: "This quadratic equation is Descending"

Test Scenario 4: Large Positive Number as an Input
- Description: Test the function behavior with large positive numbers.
- Input: Large positive number (e.g. 100000000000000)
- Expected Output: "This quadratic equation is Ascending"

Test Scenario 5: Large Negative Number as an Input
- Description: Test the function behavior with large negative numbers.
- Input: Large negative number (e.g. -100000000000000)
- Expected Output: "This quadratic equation is Descending"

Test Scenario 6: Decimal inputs
- Description: The function should work correctly with decimal values too, even though the practical use of this function is mostly with integers.
- Input: A decimal number greater than zero (e.g. 0.5)
- Expected Output: "This quadratic equation is Ascending"

Test Scenario 7: Negative decimal inputs
- Description: Test the function behavior with negative decimal numbers.
- Input: A decimal number lesser than zero (e.g. -0.5)
- Expected Output: "This quadratic equation is Descending"
"""
import pytest
from Quadratic_Equation import check_route

def test_scenario_1():
    # Test Scenario 1: Normal Usage
    expected = "This quadratic equation is Ascending"
    actual = check_route(10)
    assert actual == expected, "(Test Scenario 1 failed) Normal Usage"

def test_scenario_2():
    # Test Scenario 2: Negative Number Input
    expected = "This quadratic equation is Descending"
    actual = check_route(-5)
    assert actual == expected, "(Test Scenario 2 failed) Negative Number Input"

def test_scenario_3():
    # Test Scenario 3: Zero Input
    expected = "This quadratic equation is Descending"
    actual = check_route(0)
    assert actual == expected, "(Test Scenario 3 failed) Zero Input"

def test_scenario_4():
    # Test Scenario 4: Large Positive Number as an Input
    expected = "This quadratic equation is Ascending"
    actual = check_route(100000000000000)
    assert actual == expected, "(Test Scenario 4 failed) Large Positive Number as an Input"

def test_scenario_5():
    # Test Scenario 5: Large Negative Number as an Input
    expected = "This quadratic equation is Descending"
    actual = check_route(-100000000000000)
    assert actual == expected, "(Test Scenario 5 failed) Large Negative Number as an Input"

def test_scenario_6():
    # Test Scenario 6: Decimal inputs
    expected = "This quadratic equation is Ascending"
    actual = check_route(0.5)
    assert actual == expected, "(Test Scenario 6 failed) Decimal inputs"

def test_scenario_7():
    # Test Scenario 7: Negative decimal inputs
    expected = "This quadratic equation is Descending"
    actual = check_route(-0.5)
    assert actual == expected, "(Test Scenario 7 failed) Negative decimal inputs"
